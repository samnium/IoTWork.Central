//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IoTWork.Agent.DeviceManager.DeviceManagerAgent {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://iotwork.iotreader/commands", ConfigurationName="DeviceManagerAgent.IDeviceManagementInterface")]
    public interface IDeviceManagementInterface {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/IDeviceService/RestoreFactory", ReplyAction="http://iotwork.iotreader/commands/IDeviceService/RestoreFactoryResponse")]
        void RestoreFactory();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/IDeviceService/RestoreFactory", ReplyAction="http://iotwork.iotreader/commands/IDeviceService/RestoreFactoryResponse")]
        System.Threading.Tasks.Task RestoreFactoryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/IDeviceService/RestoreFactoryAndRestartDevice", ReplyAction="http://iotwork.iotreader/commands/IDeviceService/RestoreFactoryAndRestartDeviceRe" +
            "sponse")]
        void RestoreFactoryAndRestartDevice();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/IDeviceService/RestoreFactoryAndRestartDevice", ReplyAction="http://iotwork.iotreader/commands/IDeviceService/RestoreFactoryAndRestartDeviceRe" +
            "sponse")]
        System.Threading.Tasks.Task RestoreFactoryAndRestartDeviceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/IDeviceService/RestartDevice", ReplyAction="http://iotwork.iotreader/commands/IDeviceService/RestartDeviceResponse")]
        void RestartDevice();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/IDeviceService/RestartDevice", ReplyAction="http://iotwork.iotreader/commands/IDeviceService/RestartDeviceResponse")]
        System.Threading.Tasks.Task RestartDeviceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/IDeviceService/RestartApplication", ReplyAction="http://iotwork.iotreader/commands/IDeviceService/RestartApplicationResponse")]
        void RestartApplication();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/IDeviceService/RestartApplication", ReplyAction="http://iotwork.iotreader/commands/IDeviceService/RestartApplicationResponse")]
        System.Threading.Tasks.Task RestartApplicationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/IDeviceService/StopAcquire", ReplyAction="http://iotwork.iotreader/commands/IDeviceService/StopAcquireResponse")]
        void StopAcquire();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/IDeviceService/StopAcquire", ReplyAction="http://iotwork.iotreader/commands/IDeviceService/StopAcquireResponse")]
        System.Threading.Tasks.Task StopAcquireAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/IDeviceService/RestartAcquire", ReplyAction="http://iotwork.iotreader/commands/IDeviceService/RestartAcquireResponse")]
        void RestartAcquire();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/IDeviceService/RestartAcquire", ReplyAction="http://iotwork.iotreader/commands/IDeviceService/RestartAcquireResponse")]
        System.Threading.Tasks.Task RestartAcquireAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/IQueryService/AskForStatistics", ReplyAction="http://iotwork.iotreader/commands/IQueryService/AskForStatisticsResponse")]
        void AskForStatistics();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/IQueryService/AskForStatistics", ReplyAction="http://iotwork.iotreader/commands/IQueryService/AskForStatisticsResponse")]
        System.Threading.Tasks.Task AskForStatisticsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/IQueryService/AskForErrors", ReplyAction="http://iotwork.iotreader/commands/IQueryService/AskForErrorsResponse")]
        void AskForErrors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/IQueryService/AskForErrors", ReplyAction="http://iotwork.iotreader/commands/IQueryService/AskForErrorsResponse")]
        System.Threading.Tasks.Task AskForErrorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/IQueryService/AskForAlive", ReplyAction="http://iotwork.iotreader/commands/IQueryService/AskForAliveResponse")]
        void AskForAlive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/IQueryService/AskForAlive", ReplyAction="http://iotwork.iotreader/commands/IQueryService/AskForAliveResponse")]
        System.Threading.Tasks.Task AskForAliveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/IQueryService/AskForUpTime", ReplyAction="http://iotwork.iotreader/commands/IQueryService/AskForUpTimeResponse")]
        void AskForUpTime();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/IQueryService/AskForUpTime", ReplyAction="http://iotwork.iotreader/commands/IQueryService/AskForUpTimeResponse")]
        System.Threading.Tasks.Task AskForUpTimeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/INavigationService/ListOfDllFilesForSensors", ReplyAction="http://iotwork.iotreader/commands/INavigationService/ListOfDllFilesForSensorsResp" +
            "onse")]
        System.Tuple<string, System.DateTime>[] ListOfDllFilesForSensors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/INavigationService/ListOfDllFilesForSensors", ReplyAction="http://iotwork.iotreader/commands/INavigationService/ListOfDllFilesForSensorsResp" +
            "onse")]
        System.Threading.Tasks.Task<System.Tuple<string, System.DateTime>[]> ListOfDllFilesForSensorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/INavigationService/ListOfDllFilesForPipes", ReplyAction="http://iotwork.iotreader/commands/INavigationService/ListOfDllFilesForPipesRespon" +
            "se")]
        System.Tuple<string, System.DateTime>[] ListOfDllFilesForPipes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/INavigationService/ListOfDllFilesForPipes", ReplyAction="http://iotwork.iotreader/commands/INavigationService/ListOfDllFilesForPipesRespon" +
            "se")]
        System.Threading.Tasks.Task<System.Tuple<string, System.DateTime>[]> ListOfDllFilesForPipesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/ITransferService/UploadRequestForDllFileForSens" +
            "or", ReplyAction="http://iotwork.iotreader/commands/ITransferService/UploadRequestForDllFileForSens" +
            "orResponse")]
        void UploadRequestForDllFileForSensor(string FilePosition, string Signature, bool SkipIfPresent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/ITransferService/UploadRequestForDllFileForSens" +
            "or", ReplyAction="http://iotwork.iotreader/commands/ITransferService/UploadRequestForDllFileForSens" +
            "orResponse")]
        System.Threading.Tasks.Task UploadRequestForDllFileForSensorAsync(string FilePosition, string Signature, bool SkipIfPresent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/ITransferService/UploadRequestForDllFileForPipe" +
            "", ReplyAction="http://iotwork.iotreader/commands/ITransferService/UploadRequestForDllFileForPipe" +
            "Response")]
        void UploadRequestForDllFileForPipe(string FilePosition, string Signature, bool SkipIfPresent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/ITransferService/UploadRequestForDllFileForPipe" +
            "", ReplyAction="http://iotwork.iotreader/commands/ITransferService/UploadRequestForDllFileForPipe" +
            "Response")]
        System.Threading.Tasks.Task UploadRequestForDllFileForPipeAsync(string FilePosition, string Signature, bool SkipIfPresent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/ITransferService/UploadConfigurationDeviceFile", ReplyAction="http://iotwork.iotreader/commands/ITransferService/UploadConfigurationDeviceFileR" +
            "esponse")]
        void UploadConfigurationDeviceFile(string stream, string Signature);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/ITransferService/UploadConfigurationDeviceFile", ReplyAction="http://iotwork.iotreader/commands/ITransferService/UploadConfigurationDeviceFileR" +
            "esponse")]
        System.Threading.Tasks.Task UploadConfigurationDeviceFileAsync(string stream, string Signature);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/ITransferService/UploadConfigurationLogFile", ReplyAction="http://iotwork.iotreader/commands/ITransferService/UploadConfigurationLogFileResp" +
            "onse")]
        void UploadConfigurationLogFile(string stream, string Signature);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotreader/commands/ITransferService/UploadConfigurationLogFile", ReplyAction="http://iotwork.iotreader/commands/ITransferService/UploadConfigurationLogFileResp" +
            "onse")]
        System.Threading.Tasks.Task UploadConfigurationLogFileAsync(string stream, string Signature);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDeviceManagementInterfaceChannel : IoTWork.Agent.DeviceManager.DeviceManagerAgent.IDeviceManagementInterface, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeviceManagementInterfaceClient : System.ServiceModel.ClientBase<IoTWork.Agent.DeviceManager.DeviceManagerAgent.IDeviceManagementInterface>, IoTWork.Agent.DeviceManager.DeviceManagerAgent.IDeviceManagementInterface {
        
        public DeviceManagementInterfaceClient() {
        }
        
        public DeviceManagementInterfaceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DeviceManagementInterfaceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DeviceManagementInterfaceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DeviceManagementInterfaceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void RestoreFactory() {
            base.Channel.RestoreFactory();
        }
        
        public System.Threading.Tasks.Task RestoreFactoryAsync() {
            return base.Channel.RestoreFactoryAsync();
        }
        
        public void RestoreFactoryAndRestartDevice() {
            base.Channel.RestoreFactoryAndRestartDevice();
        }
        
        public System.Threading.Tasks.Task RestoreFactoryAndRestartDeviceAsync() {
            return base.Channel.RestoreFactoryAndRestartDeviceAsync();
        }
        
        public void RestartDevice() {
            base.Channel.RestartDevice();
        }
        
        public System.Threading.Tasks.Task RestartDeviceAsync() {
            return base.Channel.RestartDeviceAsync();
        }
        
        public void RestartApplication() {
            base.Channel.RestartApplication();
        }
        
        public System.Threading.Tasks.Task RestartApplicationAsync() {
            return base.Channel.RestartApplicationAsync();
        }
        
        public void StopAcquire() {
            base.Channel.StopAcquire();
        }
        
        public System.Threading.Tasks.Task StopAcquireAsync() {
            return base.Channel.StopAcquireAsync();
        }
        
        public void RestartAcquire() {
            base.Channel.RestartAcquire();
        }
        
        public System.Threading.Tasks.Task RestartAcquireAsync() {
            return base.Channel.RestartAcquireAsync();
        }
        
        public void AskForStatistics() {
            base.Channel.AskForStatistics();
        }
        
        public System.Threading.Tasks.Task AskForStatisticsAsync() {
            return base.Channel.AskForStatisticsAsync();
        }
        
        public void AskForErrors() {
            base.Channel.AskForErrors();
        }
        
        public System.Threading.Tasks.Task AskForErrorsAsync() {
            return base.Channel.AskForErrorsAsync();
        }
        
        public void AskForAlive() {
            base.Channel.AskForAlive();
        }
        
        public System.Threading.Tasks.Task AskForAliveAsync() {
            return base.Channel.AskForAliveAsync();
        }
        
        public void AskForUpTime() {
            base.Channel.AskForUpTime();
        }
        
        public System.Threading.Tasks.Task AskForUpTimeAsync() {
            return base.Channel.AskForUpTimeAsync();
        }
        
        public System.Tuple<string, System.DateTime>[] ListOfDllFilesForSensors() {
            return base.Channel.ListOfDllFilesForSensors();
        }
        
        public System.Threading.Tasks.Task<System.Tuple<string, System.DateTime>[]> ListOfDllFilesForSensorsAsync() {
            return base.Channel.ListOfDllFilesForSensorsAsync();
        }
        
        public System.Tuple<string, System.DateTime>[] ListOfDllFilesForPipes() {
            return base.Channel.ListOfDllFilesForPipes();
        }
        
        public System.Threading.Tasks.Task<System.Tuple<string, System.DateTime>[]> ListOfDllFilesForPipesAsync() {
            return base.Channel.ListOfDllFilesForPipesAsync();
        }
        
        public void UploadRequestForDllFileForSensor(string FilePosition, string Signature, bool SkipIfPresent) {
            base.Channel.UploadRequestForDllFileForSensor(FilePosition, Signature, SkipIfPresent);
        }
        
        public System.Threading.Tasks.Task UploadRequestForDllFileForSensorAsync(string FilePosition, string Signature, bool SkipIfPresent) {
            return base.Channel.UploadRequestForDllFileForSensorAsync(FilePosition, Signature, SkipIfPresent);
        }
        
        public void UploadRequestForDllFileForPipe(string FilePosition, string Signature, bool SkipIfPresent) {
            base.Channel.UploadRequestForDllFileForPipe(FilePosition, Signature, SkipIfPresent);
        }
        
        public System.Threading.Tasks.Task UploadRequestForDllFileForPipeAsync(string FilePosition, string Signature, bool SkipIfPresent) {
            return base.Channel.UploadRequestForDllFileForPipeAsync(FilePosition, Signature, SkipIfPresent);
        }
        
        public void UploadConfigurationDeviceFile(string stream, string Signature) {
            base.Channel.UploadConfigurationDeviceFile(stream, Signature);
        }
        
        public System.Threading.Tasks.Task UploadConfigurationDeviceFileAsync(string stream, string Signature) {
            return base.Channel.UploadConfigurationDeviceFileAsync(stream, Signature);
        }
        
        public void UploadConfigurationLogFile(string stream, string Signature) {
            base.Channel.UploadConfigurationLogFile(stream, Signature);
        }
        
        public System.Threading.Tasks.Task UploadConfigurationLogFileAsync(string stream, string Signature) {
            return base.Channel.UploadConfigurationLogFileAsync(stream, Signature);
        }
    }
}
