//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IoTWork.Agent.NetworkManager.NetworkManagerAgent {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Note", Namespace="http://iotwork.protocol/device")]
    [System.SerializableAttribute()]
    public partial class Note : IoTWork.Agent.NetworkManager.NetworkManagerAgent.Payload {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CODField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private IoTWork.Agent.NetworkManager.NetworkManagerAgent.NoteDomain DMNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> WHNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KEYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VALField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string COD {
            get {
                return this.CODField;
            }
            set {
                if ((object.ReferenceEquals(this.CODField, value) != true)) {
                    this.CODField = value;
                    this.RaisePropertyChanged("COD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IoTWork.Agent.NetworkManager.NetworkManagerAgent.NoteDomain DMN {
            get {
                return this.DMNField;
            }
            set {
                if ((this.DMNField.Equals(value) != true)) {
                    this.DMNField = value;
                    this.RaisePropertyChanged("DMN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> WHN {
            get {
                return this.WHNField;
            }
            set {
                if ((this.WHNField.Equals(value) != true)) {
                    this.WHNField = value;
                    this.RaisePropertyChanged("WHN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string KEY {
            get {
                return this.KEYField;
            }
            set {
                if ((object.ReferenceEquals(this.KEYField, value) != true)) {
                    this.KEYField = value;
                    this.RaisePropertyChanged("KEY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string VAL {
            get {
                return this.VALField;
            }
            set {
                if ((object.ReferenceEquals(this.VALField, value) != true)) {
                    this.VALField = value;
                    this.RaisePropertyChanged("VAL");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Payload", Namespace="http://iotwork.protocol/types")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IoTWork.Agent.NetworkManager.NetworkManagerAgent.Alive))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IoTWork.Agent.NetworkManager.NetworkManagerAgent.ManagerStarted))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IoTWork.Agent.NetworkManager.NetworkManagerAgent.ManagerStopped))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IoTWork.Agent.NetworkManager.NetworkManagerAgent.Statistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IoTWork.Agent.NetworkManager.NetworkManagerAgent.Errors))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IoTWork.Agent.NetworkManager.NetworkManagerAgent.Sample))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IoTWork.Agent.NetworkManager.NetworkManagerAgent.Measures))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IoTWork.Agent.NetworkManager.NetworkManagerAgent.Note))]
    public partial class Payload : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Alive", Namespace="http://iotwork.protocol/device")]
    [System.SerializableAttribute()]
    public partial class Alive : IoTWork.Agent.NetworkManager.NetworkManagerAgent.Payload {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan UTMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private IoTWork.Agent.NetworkManager.NetworkManagerAgent.AcquireStatus STAField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<IoTWork.Agent.NetworkManager.NetworkManagerAgent.Note> NOTField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan UTM {
            get {
                return this.UTMField;
            }
            set {
                if ((this.UTMField.Equals(value) != true)) {
                    this.UTMField = value;
                    this.RaisePropertyChanged("UTM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public IoTWork.Agent.NetworkManager.NetworkManagerAgent.AcquireStatus STA {
            get {
                return this.STAField;
            }
            set {
                if ((this.STAField.Equals(value) != true)) {
                    this.STAField = value;
                    this.RaisePropertyChanged("STA");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public System.Collections.Generic.List<IoTWork.Agent.NetworkManager.NetworkManagerAgent.Note> NOT {
            get {
                return this.NOTField;
            }
            set {
                if ((object.ReferenceEquals(this.NOTField, value) != true)) {
                    this.NOTField = value;
                    this.RaisePropertyChanged("NOT");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ManagerStarted", Namespace="http://iotwork.protocol/device")]
    [System.SerializableAttribute()]
    public partial class ManagerStarted : IoTWork.Agent.NetworkManager.NetworkManagerAgent.Payload {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime SATField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime SAT {
            get {
                return this.SATField;
            }
            set {
                if ((this.SATField.Equals(value) != true)) {
                    this.SATField = value;
                    this.RaisePropertyChanged("SAT");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ManagerStopped", Namespace="http://iotwork.protocol/device")]
    [System.SerializableAttribute()]
    public partial class ManagerStopped : IoTWork.Agent.NetworkManager.NetworkManagerAgent.Payload {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan UPTField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan UPT {
            get {
                return this.UPTField;
            }
            set {
                if ((this.UPTField.Equals(value) != true)) {
                    this.UPTField = value;
                    this.RaisePropertyChanged("UPT");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Statistics", Namespace="http://iotwork.protocol/device")]
    [System.SerializableAttribute()]
    public partial class Statistics : IoTWork.Agent.NetworkManager.NetworkManagerAgent.Payload {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<IoTWork.Agent.NetworkManager.NetworkManagerAgent.Note> NOTField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IoTWork.Agent.NetworkManager.NetworkManagerAgent.Note> NOT {
            get {
                return this.NOTField;
            }
            set {
                if ((object.ReferenceEquals(this.NOTField, value) != true)) {
                    this.NOTField = value;
                    this.RaisePropertyChanged("NOT");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Errors", Namespace="http://iotwork.protocol/device")]
    [System.SerializableAttribute()]
    public partial class Errors : IoTWork.Agent.NetworkManager.NetworkManagerAgent.Payload {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<IoTWork.Agent.NetworkManager.NetworkManagerAgent.Note> NOTField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IoTWork.Agent.NetworkManager.NetworkManagerAgent.Note> NOT {
            get {
                return this.NOTField;
            }
            set {
                if ((object.ReferenceEquals(this.NOTField, value) != true)) {
                    this.NOTField = value;
                    this.RaisePropertyChanged("NOT");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Sample", Namespace="http://iotwork.protocol/data")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.IPEndPoint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.EndPoint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.IPAddress))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<IoTWork.Agent.NetworkManager.NetworkManagerAgent.Note>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IoTWork.Agent.NetworkManager.NetworkManagerAgent.Note))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IoTWork.Agent.NetworkManager.NetworkManagerAgent.Alive))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IoTWork.Agent.NetworkManager.NetworkManagerAgent.AcquireStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IoTWork.Agent.NetworkManager.NetworkManagerAgent.ManagerStarted))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IoTWork.Agent.NetworkManager.NetworkManagerAgent.ManagerStopped))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IoTWork.Agent.NetworkManager.NetworkManagerAgent.Statistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IoTWork.Agent.NetworkManager.NetworkManagerAgent.Errors))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IoTWork.Agent.NetworkManager.NetworkManagerAgent.NoteDomain))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Net.Sockets.AddressFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IoTWork.Agent.NetworkManager.NetworkManagerAgent.Measures))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<IoTWork.Agent.NetworkManager.NetworkManagerAgent.Sample>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<int, int, int, System.Net.IPEndPoint>>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Tuple<int, int, int, System.Net.IPEndPoint>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<System.Tuple<int, int, System.Net.IPEndPoint>>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Tuple<int, int, System.Net.IPEndPoint>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IoTWork.Agent.NetworkManager.NetworkManagerAgent.Payload))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<ushort>))]
    public partial class Sample : IoTWork.Agent.NetworkManager.NetworkManagerAgent.Payload {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime AATField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object DATField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime AAT {
            get {
                return this.AATField;
            }
            set {
                if ((this.AATField.Equals(value) != true)) {
                    this.AATField = value;
                    this.RaisePropertyChanged("AAT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object DAT {
            get {
                return this.DATField;
            }
            set {
                if ((object.ReferenceEquals(this.DATField, value) != true)) {
                    this.DATField = value;
                    this.RaisePropertyChanged("DAT");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Measures", Namespace="http://iotwork.protocol/data")]
    [System.SerializableAttribute()]
    public partial class Measures : IoTWork.Agent.NetworkManager.NetworkManagerAgent.Payload {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<IoTWork.Agent.NetworkManager.NetworkManagerAgent.Sample> DATSField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IoTWork.Agent.NetworkManager.NetworkManagerAgent.Sample> DATS {
            get {
                return this.DATSField;
            }
            set {
                if ((object.ReferenceEquals(this.DATSField, value) != true)) {
                    this.DATSField = value;
                    this.RaisePropertyChanged("DATS");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NoteDomain", Namespace="http://iotwork.protocol/device")]
    public enum NoteDomain : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        System = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Network = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Chain = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sensor = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AcquireStatus", Namespace="http://iotwork.protocol/device")]
    public enum AcquireStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Acquiring = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Stopped = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Paused = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Faulted = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://iotwork.iotnetwork/commands", ConfigurationName="NetworkManagerAgent.INetworkManagementInterface")]
    public interface INetworkManagementInterface {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkPickerService/PickerStop", ReplyAction="http://iotwork.iotnetwork/commands/INetworkPickerService/PickerStopResponse")]
        void PickerStop(int NetworkOrdinal, int RegionOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkPickerService/PickerStop", ReplyAction="http://iotwork.iotnetwork/commands/INetworkPickerService/PickerStopResponse")]
        System.Threading.Tasks.Task PickerStopAsync(int NetworkOrdinal, int RegionOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkPickerService/PickerRestart", ReplyAction="http://iotwork.iotnetwork/commands/INetworkPickerService/PickerRestartResponse")]
        void PickerRestart(int NetworkOrdinal, int RegionOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkPickerService/PickerRestart", ReplyAction="http://iotwork.iotnetwork/commands/INetworkPickerService/PickerRestartResponse")]
        System.Threading.Tasks.Task PickerRestartAsync(int NetworkOrdinal, int RegionOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkPickerService/PickerStart", ReplyAction="http://iotwork.iotnetwork/commands/INetworkPickerService/PickerStartResponse")]
        void PickerStart(int NetworkOrdinal, int RegionOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkPickerService/PickerStart", ReplyAction="http://iotwork.iotnetwork/commands/INetworkPickerService/PickerStartResponse")]
        System.Threading.Tasks.Task PickerStartAsync(int NetworkOrdinal, int RegionOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkPickerService/PickerConfigureAndRestar" +
            "t", ReplyAction="http://iotwork.iotnetwork/commands/INetworkPickerService/PickerConfigureAndRestar" +
            "tResponse")]
        void PickerConfigureAndRestart(int NetworkOrdinal, int RegionOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkPickerService/PickerConfigureAndRestar" +
            "t", ReplyAction="http://iotwork.iotnetwork/commands/INetworkPickerService/PickerConfigureAndRestar" +
            "tResponse")]
        System.Threading.Tasks.Task PickerConfigureAndRestartAsync(int NetworkOrdinal, int RegionOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceService/DeviceConfigureAndRestar" +
            "t", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceService/DeviceConfigureAndRestar" +
            "tResponse")]
        void DeviceConfigureAndRestart(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceService/DeviceConfigureAndRestar" +
            "t", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceService/DeviceConfigureAndRestar" +
            "tResponse")]
        System.Threading.Tasks.Task DeviceConfigureAndRestartAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceService/DeviceRestoreFactory", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceService/DeviceRestoreFactoryResp" +
            "onse")]
        void DeviceRestoreFactory(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceService/DeviceRestoreFactory", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceService/DeviceRestoreFactoryResp" +
            "onse")]
        System.Threading.Tasks.Task DeviceRestoreFactoryAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceService/DeviceRestoreFactoryAndR" +
            "estartDevice", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceService/DeviceRestoreFactoryAndR" +
            "estartDeviceResponse")]
        void DeviceRestoreFactoryAndRestartDevice(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceService/DeviceRestoreFactoryAndR" +
            "estartDevice", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceService/DeviceRestoreFactoryAndR" +
            "estartDeviceResponse")]
        System.Threading.Tasks.Task DeviceRestoreFactoryAndRestartDeviceAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceService/DeviceRestartDevice", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceService/DeviceRestartDeviceRespo" +
            "nse")]
        void DeviceRestartDevice(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceService/DeviceRestartDevice", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceService/DeviceRestartDeviceRespo" +
            "nse")]
        System.Threading.Tasks.Task DeviceRestartDeviceAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceService/DeviceRestartApplication" +
            "", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceService/DeviceRestartApplication" +
            "Response")]
        void DeviceRestartApplication(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceService/DeviceRestartApplication" +
            "", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceService/DeviceRestartApplication" +
            "Response")]
        System.Threading.Tasks.Task DeviceRestartApplicationAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceService/DeviceStopAcquire", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceService/DeviceStopAcquireRespons" +
            "e")]
        void DeviceStopAcquire(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceService/DeviceStopAcquire", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceService/DeviceStopAcquireRespons" +
            "e")]
        System.Threading.Tasks.Task DeviceStopAcquireAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceService/DeviceRestartAcquire", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceService/DeviceRestartAcquireResp" +
            "onse")]
        void DeviceRestartAcquire(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceService/DeviceRestartAcquire", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceService/DeviceRestartAcquireResp" +
            "onse")]
        System.Threading.Tasks.Task DeviceRestartAcquireAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceQueryService/DeviceAskForStatist" +
            "ics", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceQueryService/DeviceAskForStatist" +
            "icsResponse")]
        void DeviceAskForStatistics(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceQueryService/DeviceAskForStatist" +
            "ics", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceQueryService/DeviceAskForStatist" +
            "icsResponse")]
        System.Threading.Tasks.Task DeviceAskForStatisticsAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceQueryService/DeviceAskForErrors", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceQueryService/DeviceAskForErrorsR" +
            "esponse")]
        void DeviceAskForErrors(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceQueryService/DeviceAskForErrors", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceQueryService/DeviceAskForErrorsR" +
            "esponse")]
        System.Threading.Tasks.Task DeviceAskForErrorsAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceQueryService/DeviceAskForAlive", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceQueryService/DeviceAskForAliveRe" +
            "sponse")]
        void DeviceAskForAlive(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceQueryService/DeviceAskForAlive", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceQueryService/DeviceAskForAliveRe" +
            "sponse")]
        System.Threading.Tasks.Task DeviceAskForAliveAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceQueryService/DeviceAskForUpTime", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceQueryService/DeviceAskForUpTimeR" +
            "esponse")]
        void DeviceAskForUpTime(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceQueryService/DeviceAskForUpTime", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceQueryService/DeviceAskForUpTimeR" +
            "esponse")]
        System.Threading.Tasks.Task DeviceAskForUpTimeAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceNavigationService/DeviceListOfDl" +
            "lFilesForSensors", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceNavigationService/DeviceListOfDl" +
            "lFilesForSensorsResponse")]
        void DeviceListOfDllFilesForSensors(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceNavigationService/DeviceListOfDl" +
            "lFilesForSensors", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceNavigationService/DeviceListOfDl" +
            "lFilesForSensorsResponse")]
        System.Threading.Tasks.Task DeviceListOfDllFilesForSensorsAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceNavigationService/DeviceListOfDl" +
            "lFilesForPipes", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceNavigationService/DeviceListOfDl" +
            "lFilesForPipesResponse")]
        void DeviceListOfDllFilesForPipes(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceNavigationService/DeviceListOfDl" +
            "lFilesForPipes", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceNavigationService/DeviceListOfDl" +
            "lFilesForPipesResponse")]
        System.Threading.Tasks.Task DeviceListOfDllFilesForPipesAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceTransferService/DeviceUploadRequ" +
            "estForDllFileForSensor", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceTransferService/DeviceUploadRequ" +
            "estForDllFileForSensorResponse")]
        void DeviceUploadRequestForDllFileForSensor(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceTransferService/DeviceUploadRequ" +
            "estForDllFileForSensor", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceTransferService/DeviceUploadRequ" +
            "estForDllFileForSensorResponse")]
        System.Threading.Tasks.Task DeviceUploadRequestForDllFileForSensorAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceTransferService/DeviceUploadRequ" +
            "estForDllFileForPipe", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceTransferService/DeviceUploadRequ" +
            "estForDllFileForPipeResponse")]
        void DeviceUploadRequestForDllFileForPipe(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceTransferService/DeviceUploadRequ" +
            "estForDllFileForPipe", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceTransferService/DeviceUploadRequ" +
            "estForDllFileForPipeResponse")]
        System.Threading.Tasks.Task DeviceUploadRequestForDllFileForPipeAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceTransferService/DeviceUploadConf" +
            "igurationDeviceFile", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceTransferService/DeviceUploadConf" +
            "igurationDeviceFileResponse")]
        void DeviceUploadConfigurationDeviceFile(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceTransferService/DeviceUploadConf" +
            "igurationDeviceFile", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceTransferService/DeviceUploadConf" +
            "igurationDeviceFileResponse")]
        System.Threading.Tasks.Task DeviceUploadConfigurationDeviceFileAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceTransferService/DeviceUploadConf" +
            "igurationLogFile", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceTransferService/DeviceUploadConf" +
            "igurationLogFileResponse")]
        void DeviceUploadConfigurationLogFile(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkDeviceTransferService/DeviceUploadConf" +
            "igurationLogFile", ReplyAction="http://iotwork.iotnetwork/commands/INetworkDeviceTransferService/DeviceUploadConf" +
            "igurationLogFileResponse")]
        System.Threading.Tasks.Task DeviceUploadConfigurationLogFileAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkCacheService/RegisteredDevices", ReplyAction="http://iotwork.iotnetwork/commands/INetworkCacheService/RegisteredDevicesResponse" +
            "")]
        System.Collections.Generic.List<System.Tuple<int, int, int, System.Net.IPEndPoint>> RegisteredDevices();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkCacheService/RegisteredDevices", ReplyAction="http://iotwork.iotnetwork/commands/INetworkCacheService/RegisteredDevicesResponse" +
            "")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<int, int, int, System.Net.IPEndPoint>>> RegisteredDevicesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkCacheService/RegisteredPickers", ReplyAction="http://iotwork.iotnetwork/commands/INetworkCacheService/RegisteredPickersResponse" +
            "")]
        System.Collections.Generic.List<System.Tuple<int, int, System.Net.IPEndPoint>> RegisteredPickers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkCacheService/RegisteredPickers", ReplyAction="http://iotwork.iotnetwork/commands/INetworkCacheService/RegisteredPickersResponse" +
            "")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<int, int, System.Net.IPEndPoint>>> RegisteredPickersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkCacheService/GetDeviceStatistics", ReplyAction="http://iotwork.iotnetwork/commands/INetworkCacheService/GetDeviceStatisticsRespon" +
            "se")]
        System.Collections.Generic.List<IoTWork.Agent.NetworkManager.NetworkManagerAgent.Note> GetDeviceStatistics(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkCacheService/GetDeviceStatistics", ReplyAction="http://iotwork.iotnetwork/commands/INetworkCacheService/GetDeviceStatisticsRespon" +
            "se")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<IoTWork.Agent.NetworkManager.NetworkManagerAgent.Note>> GetDeviceStatisticsAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkCacheService/GetDeviceErrors", ReplyAction="http://iotwork.iotnetwork/commands/INetworkCacheService/GetDeviceErrorsResponse")]
        System.Collections.Generic.List<IoTWork.Agent.NetworkManager.NetworkManagerAgent.Note> GetDeviceErrors(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkCacheService/GetDeviceErrors", ReplyAction="http://iotwork.iotnetwork/commands/INetworkCacheService/GetDeviceErrorsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<IoTWork.Agent.NetworkManager.NetworkManagerAgent.Note>> GetDeviceErrorsAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkCacheService/GetPickerStatistics", ReplyAction="http://iotwork.iotnetwork/commands/INetworkCacheService/GetPickerStatisticsRespon" +
            "se")]
        System.Collections.Generic.List<IoTWork.Agent.NetworkManager.NetworkManagerAgent.Note> GetPickerStatistics(int NetworkOrdinal, int RegionOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkCacheService/GetPickerStatistics", ReplyAction="http://iotwork.iotnetwork/commands/INetworkCacheService/GetPickerStatisticsRespon" +
            "se")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<IoTWork.Agent.NetworkManager.NetworkManagerAgent.Note>> GetPickerStatisticsAsync(int NetworkOrdinal, int RegionOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkCacheService/GetPickerErrors", ReplyAction="http://iotwork.iotnetwork/commands/INetworkCacheService/GetPickerErrorsResponse")]
        System.Collections.Generic.List<IoTWork.Agent.NetworkManager.NetworkManagerAgent.Note> GetPickerErrors(int NetworkOrdinal, int RegionOrdinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotnetwork/commands/INetworkCacheService/GetPickerErrors", ReplyAction="http://iotwork.iotnetwork/commands/INetworkCacheService/GetPickerErrorsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<IoTWork.Agent.NetworkManager.NetworkManagerAgent.Note>> GetPickerErrorsAsync(int NetworkOrdinal, int RegionOrdinal);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INetworkManagementInterfaceChannel : IoTWork.Agent.NetworkManager.NetworkManagerAgent.INetworkManagementInterface, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NetworkManagementInterfaceClient : System.ServiceModel.ClientBase<IoTWork.Agent.NetworkManager.NetworkManagerAgent.INetworkManagementInterface>, IoTWork.Agent.NetworkManager.NetworkManagerAgent.INetworkManagementInterface {
        
        public NetworkManagementInterfaceClient() {
        }
        
        public NetworkManagementInterfaceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NetworkManagementInterfaceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NetworkManagementInterfaceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NetworkManagementInterfaceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void PickerStop(int NetworkOrdinal, int RegionOrdinal) {
            base.Channel.PickerStop(NetworkOrdinal, RegionOrdinal);
        }
        
        public System.Threading.Tasks.Task PickerStopAsync(int NetworkOrdinal, int RegionOrdinal) {
            return base.Channel.PickerStopAsync(NetworkOrdinal, RegionOrdinal);
        }
        
        public void PickerRestart(int NetworkOrdinal, int RegionOrdinal) {
            base.Channel.PickerRestart(NetworkOrdinal, RegionOrdinal);
        }
        
        public System.Threading.Tasks.Task PickerRestartAsync(int NetworkOrdinal, int RegionOrdinal) {
            return base.Channel.PickerRestartAsync(NetworkOrdinal, RegionOrdinal);
        }
        
        public void PickerStart(int NetworkOrdinal, int RegionOrdinal) {
            base.Channel.PickerStart(NetworkOrdinal, RegionOrdinal);
        }
        
        public System.Threading.Tasks.Task PickerStartAsync(int NetworkOrdinal, int RegionOrdinal) {
            return base.Channel.PickerStartAsync(NetworkOrdinal, RegionOrdinal);
        }
        
        public void PickerConfigureAndRestart(int NetworkOrdinal, int RegionOrdinal) {
            base.Channel.PickerConfigureAndRestart(NetworkOrdinal, RegionOrdinal);
        }
        
        public System.Threading.Tasks.Task PickerConfigureAndRestartAsync(int NetworkOrdinal, int RegionOrdinal) {
            return base.Channel.PickerConfigureAndRestartAsync(NetworkOrdinal, RegionOrdinal);
        }
        
        public void DeviceConfigureAndRestart(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            base.Channel.DeviceConfigureAndRestart(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public System.Threading.Tasks.Task DeviceConfigureAndRestartAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            return base.Channel.DeviceConfigureAndRestartAsync(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public void DeviceRestoreFactory(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            base.Channel.DeviceRestoreFactory(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public System.Threading.Tasks.Task DeviceRestoreFactoryAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            return base.Channel.DeviceRestoreFactoryAsync(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public void DeviceRestoreFactoryAndRestartDevice(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            base.Channel.DeviceRestoreFactoryAndRestartDevice(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public System.Threading.Tasks.Task DeviceRestoreFactoryAndRestartDeviceAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            return base.Channel.DeviceRestoreFactoryAndRestartDeviceAsync(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public void DeviceRestartDevice(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            base.Channel.DeviceRestartDevice(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public System.Threading.Tasks.Task DeviceRestartDeviceAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            return base.Channel.DeviceRestartDeviceAsync(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public void DeviceRestartApplication(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            base.Channel.DeviceRestartApplication(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public System.Threading.Tasks.Task DeviceRestartApplicationAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            return base.Channel.DeviceRestartApplicationAsync(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public void DeviceStopAcquire(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            base.Channel.DeviceStopAcquire(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public System.Threading.Tasks.Task DeviceStopAcquireAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            return base.Channel.DeviceStopAcquireAsync(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public void DeviceRestartAcquire(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            base.Channel.DeviceRestartAcquire(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public System.Threading.Tasks.Task DeviceRestartAcquireAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            return base.Channel.DeviceRestartAcquireAsync(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public void DeviceAskForStatistics(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            base.Channel.DeviceAskForStatistics(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public System.Threading.Tasks.Task DeviceAskForStatisticsAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            return base.Channel.DeviceAskForStatisticsAsync(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public void DeviceAskForErrors(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            base.Channel.DeviceAskForErrors(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public System.Threading.Tasks.Task DeviceAskForErrorsAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            return base.Channel.DeviceAskForErrorsAsync(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public void DeviceAskForAlive(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            base.Channel.DeviceAskForAlive(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public System.Threading.Tasks.Task DeviceAskForAliveAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            return base.Channel.DeviceAskForAliveAsync(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public void DeviceAskForUpTime(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            base.Channel.DeviceAskForUpTime(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public System.Threading.Tasks.Task DeviceAskForUpTimeAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            return base.Channel.DeviceAskForUpTimeAsync(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public void DeviceListOfDllFilesForSensors(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            base.Channel.DeviceListOfDllFilesForSensors(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public System.Threading.Tasks.Task DeviceListOfDllFilesForSensorsAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            return base.Channel.DeviceListOfDllFilesForSensorsAsync(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public void DeviceListOfDllFilesForPipes(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            base.Channel.DeviceListOfDllFilesForPipes(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public System.Threading.Tasks.Task DeviceListOfDllFilesForPipesAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            return base.Channel.DeviceListOfDllFilesForPipesAsync(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public void DeviceUploadRequestForDllFileForSensor(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            base.Channel.DeviceUploadRequestForDllFileForSensor(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public System.Threading.Tasks.Task DeviceUploadRequestForDllFileForSensorAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            return base.Channel.DeviceUploadRequestForDllFileForSensorAsync(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public void DeviceUploadRequestForDllFileForPipe(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            base.Channel.DeviceUploadRequestForDllFileForPipe(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public System.Threading.Tasks.Task DeviceUploadRequestForDllFileForPipeAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            return base.Channel.DeviceUploadRequestForDllFileForPipeAsync(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public void DeviceUploadConfigurationDeviceFile(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            base.Channel.DeviceUploadConfigurationDeviceFile(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public System.Threading.Tasks.Task DeviceUploadConfigurationDeviceFileAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            return base.Channel.DeviceUploadConfigurationDeviceFileAsync(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public void DeviceUploadConfigurationLogFile(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            base.Channel.DeviceUploadConfigurationLogFile(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public System.Threading.Tasks.Task DeviceUploadConfigurationLogFileAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            return base.Channel.DeviceUploadConfigurationLogFileAsync(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public System.Collections.Generic.List<System.Tuple<int, int, int, System.Net.IPEndPoint>> RegisteredDevices() {
            return base.Channel.RegisteredDevices();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<int, int, int, System.Net.IPEndPoint>>> RegisteredDevicesAsync() {
            return base.Channel.RegisteredDevicesAsync();
        }
        
        public System.Collections.Generic.List<System.Tuple<int, int, System.Net.IPEndPoint>> RegisteredPickers() {
            return base.Channel.RegisteredPickers();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<int, int, System.Net.IPEndPoint>>> RegisteredPickersAsync() {
            return base.Channel.RegisteredPickersAsync();
        }
        
        public System.Collections.Generic.List<IoTWork.Agent.NetworkManager.NetworkManagerAgent.Note> GetDeviceStatistics(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            return base.Channel.GetDeviceStatistics(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<IoTWork.Agent.NetworkManager.NetworkManagerAgent.Note>> GetDeviceStatisticsAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            return base.Channel.GetDeviceStatisticsAsync(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public System.Collections.Generic.List<IoTWork.Agent.NetworkManager.NetworkManagerAgent.Note> GetDeviceErrors(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            return base.Channel.GetDeviceErrors(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<IoTWork.Agent.NetworkManager.NetworkManagerAgent.Note>> GetDeviceErrorsAsync(int NetworkOrdinal, int RegionOrdinal, int DeviceOrdinal) {
            return base.Channel.GetDeviceErrorsAsync(NetworkOrdinal, RegionOrdinal, DeviceOrdinal);
        }
        
        public System.Collections.Generic.List<IoTWork.Agent.NetworkManager.NetworkManagerAgent.Note> GetPickerStatistics(int NetworkOrdinal, int RegionOrdinal) {
            return base.Channel.GetPickerStatistics(NetworkOrdinal, RegionOrdinal);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<IoTWork.Agent.NetworkManager.NetworkManagerAgent.Note>> GetPickerStatisticsAsync(int NetworkOrdinal, int RegionOrdinal) {
            return base.Channel.GetPickerStatisticsAsync(NetworkOrdinal, RegionOrdinal);
        }
        
        public System.Collections.Generic.List<IoTWork.Agent.NetworkManager.NetworkManagerAgent.Note> GetPickerErrors(int NetworkOrdinal, int RegionOrdinal) {
            return base.Channel.GetPickerErrors(NetworkOrdinal, RegionOrdinal);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<IoTWork.Agent.NetworkManager.NetworkManagerAgent.Note>> GetPickerErrorsAsync(int NetworkOrdinal, int RegionOrdinal) {
            return base.Channel.GetPickerErrorsAsync(NetworkOrdinal, RegionOrdinal);
        }
    }
}
