//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IoTWork.Agent.PickerManager.PickerManagerAgent {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://iotwork.iotpicker/commands", ConfigurationName="PickerManagerAgent.IPickerManagementInterface")]
    public interface IPickerManagementInterface {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotpicker/commands/IPickerService/Stop", ReplyAction="http://iotwork.iotpicker/commands/IPickerService/StopResponse")]
        void Stop();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotpicker/commands/IPickerService/Stop", ReplyAction="http://iotwork.iotpicker/commands/IPickerService/StopResponse")]
        System.Threading.Tasks.Task StopAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotpicker/commands/IPickerQueryService/AskForStatistics", ReplyAction="http://iotwork.iotpicker/commands/IPickerQueryService/AskForStatisticsResponse")]
        void AskForStatistics();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotpicker/commands/IPickerQueryService/AskForStatistics", ReplyAction="http://iotwork.iotpicker/commands/IPickerQueryService/AskForStatisticsResponse")]
        System.Threading.Tasks.Task AskForStatisticsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotpicker/commands/IPickerQueryService/AskForErrors", ReplyAction="http://iotwork.iotpicker/commands/IPickerQueryService/AskForErrorsResponse")]
        void AskForErrors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotpicker/commands/IPickerQueryService/AskForErrors", ReplyAction="http://iotwork.iotpicker/commands/IPickerQueryService/AskForErrorsResponse")]
        System.Threading.Tasks.Task AskForErrorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotpicker/commands/IPickerQueryService/AskForAlive", ReplyAction="http://iotwork.iotpicker/commands/IPickerQueryService/AskForAliveResponse")]
        void AskForAlive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotpicker/commands/IPickerQueryService/AskForAlive", ReplyAction="http://iotwork.iotpicker/commands/IPickerQueryService/AskForAliveResponse")]
        System.Threading.Tasks.Task AskForAliveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotpicker/commands/IPickerQueryService/AskForUpTime", ReplyAction="http://iotwork.iotpicker/commands/IPickerQueryService/AskForUpTimeResponse")]
        void AskForUpTime();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://iotwork.iotpicker/commands/IPickerQueryService/AskForUpTime", ReplyAction="http://iotwork.iotpicker/commands/IPickerQueryService/AskForUpTimeResponse")]
        System.Threading.Tasks.Task AskForUpTimeAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPickerManagementInterfaceChannel : IoTWork.Agent.PickerManager.PickerManagerAgent.IPickerManagementInterface, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PickerManagementInterfaceClient : System.ServiceModel.ClientBase<IoTWork.Agent.PickerManager.PickerManagerAgent.IPickerManagementInterface>, IoTWork.Agent.PickerManager.PickerManagerAgent.IPickerManagementInterface {
        
        public PickerManagementInterfaceClient() {
        }
        
        public PickerManagementInterfaceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PickerManagementInterfaceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PickerManagementInterfaceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PickerManagementInterfaceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Stop() {
            base.Channel.Stop();
        }
        
        public System.Threading.Tasks.Task StopAsync() {
            return base.Channel.StopAsync();
        }
        
        public void AskForStatistics() {
            base.Channel.AskForStatistics();
        }
        
        public System.Threading.Tasks.Task AskForStatisticsAsync() {
            return base.Channel.AskForStatisticsAsync();
        }
        
        public void AskForErrors() {
            base.Channel.AskForErrors();
        }
        
        public System.Threading.Tasks.Task AskForErrorsAsync() {
            return base.Channel.AskForErrorsAsync();
        }
        
        public void AskForAlive() {
            base.Channel.AskForAlive();
        }
        
        public System.Threading.Tasks.Task AskForAliveAsync() {
            return base.Channel.AskForAliveAsync();
        }
        
        public void AskForUpTime() {
            base.Channel.AskForUpTime();
        }
        
        public System.Threading.Tasks.Task AskForUpTimeAsync() {
            return base.Channel.AskForUpTimeAsync();
        }
    }
}
